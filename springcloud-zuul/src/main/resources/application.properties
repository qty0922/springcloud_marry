server.port=8085
spring.application.name=springcloud-zuul

eureka.client.service-url.defaultZone=http://qty:qty@127.0.0.1:8080/eureka/

#自定义 Eureka 的 InstanceID，格式 ―― 服务名称：服务所在 IP：服务端口
eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}

zuul.routes.biancheng.path=/biancheng/**
zuul.routes.biancheng.url=http://c.biancheng.net

#访问规则是“API 网关地址+访问的服务名称+接口 URI”


#―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

#1. 指定具体服务路由
#我们可以为每一个服务都配置一个路由转发规则：（这其实就是将服务名称变成了我们自定义的名称）
#zuul.routes.fsh-house.path=/api-house/**

#2、路由前缀
#API 前面配置一个统一的前缀
#zuul.prefix=/rest

#3、本地跳转
#zuul.routes.fsh-substitution.path=/api/**
#zuul.routes.fsh-substitution.url=forward:/local


#――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


#1、利用 shouldFilter 方法中的 return false 让过滤器不再执行

#2、通过配置方式来禁用过滤器，格式为“zuul. 过滤器的类名.过滤器类型 .disable=true”。
# 如果我们需要禁用“使用过滤器”部分中的 IpFilter，可以用下面的配置：
# zuul.IpFilter.pre.disable=true

#――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

#当 @EnableZuulProxy 与 Spring Boot Actuator 配合使用时，
# Zuul 会暴露一个路由管理端点 /routes。
# 借助这个端点，可以方便、直观地查看以及管理 Zuul 的路由。
# 只要利用zuul去分发其他服务，zuul就可以记录这个路由端口服务

#访问地址：http://localhost:8085/actuator/routes，可以查看路由信息
#访问地址：http://localhost:8085/actuator/filters，可以查看过滤器信息
management.endpoints.web.exposure.include=*